CMAKE_MINIMUM_REQUIRED(VERSION 2.9)

# Compiler
SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

ADD_SUBDIRECTORY(libs/pybind11)

SET(LIBRARY_NAME "urbg2o")
SET(SOURCES "src/pose_estimation.cpp" "src/bindings.cpp" "src/local_ba.cpp")

# Search path for cmake module definitions
LIST(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake_modules)

IF(APPLE)
	SET(CMAKE_SHARED_LIBRARY_SUFFIX ".so")
	SET(CMAKE_MACOSX_RPATH ON)
ENDIF(APPLE)

FIND_PACKAGE(PythonLibs REQUIRED)

IF(NOT PYTHONLIBS_FOUND)
	# fallback when standard search does not work
	execute_process ( COMMAND ${PYTHON_EXECUTABLE} -c 
									"import sys; skip = 2 if sys.platform.startswith('win') else 1; print 'python' + sys.version[0:3:skip]"
										OUTPUT_VARIABLE PYTHON_LIBRARY_NAME OUTPUT_STRIP_TRAILING_WHITESPACE)
	execute_process ( COMMAND ${PYTHON_EXECUTABLE} -c 
									"import sys; print sys.exec_prefix"
										OUTPUT_VARIABLE PYTHON_PREFIX OUTPUT_STRIP_TRAILING_WHITESPACE)
	FIND_LIBRARY(PYTHON_LIBRARIES ${PYTHON_LIBRARY_NAME} "${PYTHON_PREFIX}/libs")
	execute_process ( COMMAND ${PYTHON_EXECUTABLE} -c
									"from distutils.sysconfig import *; print get_python_inc()"
									OUTPUT_VARIABLE PYTHON_INCLUDE_DIRS OUTPUT_STRIP_TRAILING_WHITESPACE)
	IF(PYTHON_LIBRARIES AND PYTHON_INCLUDE_DIRS)
		SET(PYTHONLIBS_FOUND TRUE)
	ENDIF()
ENDIF()

FIND_PACKAGE(g2o REQUIRED)
FIND_PACKAGE(Eigen3 REQUIRED)
FIND_PACKAGE(CSparse REQUIRED)
FIND_PACKAGE(Cholmod REQUIRED)
FIND_PACKAGE(OpenCV REQUIRED)

pybind11_add_module(${LIBRARY_NAME} ${SOURCES})

INCLUDE_DIRECTORIES(
	${CMAKE_CURRENT_SOURCE_DIR}
	${G2O_INCLUDE_DIR}
	${CSPARSE_INCLUDE_DIR}
	${Cholmod_INCLUDE_DIR}
	${EIGEN3_INCLUDE_DIR}
	${OpenCV_INCLUDE_DIR}
	${PYTHON_INCLUDE_DIRS}
	libs/pybind11/include
)

LIST(APPEND G2O_LIBS
	${G2O_CORE_LIBRARY} ${G2O_STUFF_LIBRARY} ${G2O_SOLVER_CHOLMOD} ${G2O_SOLVER_CSPARSE}
	${G2O_SOLVER_CSPARSE_EXTENSION} ${G2O_SOLVER_DENSE} ${G2O_TYPES_SBA}
	${G2O_SOLVER_SLAM2D_LINEAR} ${G2O_TYPES_ICP} ${G2O_TYPES_SLAM2D}
	${G2O_SOLVER_STRUCTURE_ONLY} ${G2O_TYPES_SLAM3D} ${G2O_TYPES_SCLAM2D} ${G2O_SOLVER_PCG} 
	${G2O_TYPES_DATA} ${G2O_TYPES_SIM3}
)

target_link_libraries(${LIBRARY_NAME} PRIVATE
	${G2O_LIBS}
	${PYTHON_LIBRARIES}
	${OpenCV_LIBS}
)
